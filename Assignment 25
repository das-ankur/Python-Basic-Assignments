1) What is the difference between enclosing a list comprehension in square brackets and
parentheses?
Ans. Enclosing in a square brackets indicates list comprehension and square breackets
usually indicates generators.
2) What is the relationship between generators and iterators?
Ans. Generators. It is another way of creating iterators in a simple way where 
it uses the keyword “yield” instead of returning it in a defined function. 
Generators are implemented using a function. Just as iterators, generators also 
follow lazy evaluation.
3) What are the signs that a function is a generator function?
Ans. It has a yield  statement and a base condition.
4) What is the purpose of a yield statement?
Ans. In its simplest form, a yield statement looks much like a return statement,
except that instead of stopping execution of the function and returning, yield 
instead provides a value to the code looping over the generator and pauses 
execution of the generator function.
5) What is the relationship between map calls and list comprehensions? Make a comparison and
contrast between the two.
Ans. Map and List Comprehension:
i) List comprehension is more concise and easier to read as compared to map.
ii) List comprehension allows filtering. In map, we have no such facility. 
For example, to print all even numbers in range of 100, we can write 
[n for n in range(100) if n%2 == 0]. There is no alternate for it in map.
iii) List comprehension are used when a list of results is required as map 
only returns a map object and does not return any list.
iv) List comprehension is faster than map when we need to evaluate expressions 
that are too long or complicated to express.
v) Map is faster in case of calling an already defined function (as no lambda 
is required).
