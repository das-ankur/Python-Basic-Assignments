1. Set the variable test1 to the string 'This is a test of the emergency text system,' and save test1 to a
file named test.txt.
Ans.
test1 = 'This is a test  of the emergency text system,'
with open('test.txt', 'w') as f:
    f.write(test1)
    
2. Read the contents of the file test.txt into the variable test2. Is there a difference between test 1
and test 2?
Ans.
f = open("test.txt", "r")
test2 = f.read()
#there is no difference between test1 and test2
3. Create a CSV file called books.csv by using these lines:
title,author,year
The Weirdstone of Brisingamen,Alan Garner,1960
Perdido Street Station,China Miéville,2000
Thud!,Terry Pratchett,2005
The Spellman Files,Lisa Lutz,2007
Small Gods,Terry Pratchett,1992
Ans.
import oandas as pd
df = pd.DataFrame()
df.columns = ['title','author','year']
df['title'] = ['The Weirdstone of Brisingamen', 'Perdido Street Station', 'Thud!', 'The Spellman Files', 'Small Gods']
df['author'] = ['Alan Garner', 'China Miéville', 'Terry Pratchett', 'Lisa Lutz', 'Terry Pratchett']
df['year'] = [1960, 2000, 2005, 2007, 1992]
df.to_csv('books,csv')

4. Use the sqlite3 module to create a SQLite database called books.db, and a table called books with
these fields: title (text), author (text), and year (integer).
Ans.
import sqlite3
from sqlite3 import Error
def create_connection(db_file):
    """ create a database connection to the SQLite database
        specified by db_file
    :param db_file: database file
    :return: Connection object or None
    """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Error as e:
        print(e)

    return conn
def create_table(conn, create_table_sql):
    """ create a table from the create_table_sql statement
    :param conn: Connection object
    :param create_table_sql: a CREATE TABLE statement
    :return:
    """
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
    except Error as e:
        print(e)
def main():
    database = r"C:\sqlite\db\pythonsqlite.db"

    books = """ CREATE TABLE IF NOT EXISTS projects (
                                        title  text PRIMARY KEY,
                                        author text NOT NULL,
                                        year integer
                                    ); """
    # create a database connection
    conn = create_connection(database)

    # create tables
    if conn is not None:
        # create projects table
        create_table(conn, sql_create_projects_table)

        # create tasks table
        create_table(conn, sql_create_tasks_table)
    else:
        print("Error! cannot create the database connection.")
if __name__ == '__main__':
    main()
5. Read books.csv and insert its data into the book table.
Ans. 
import pandas as pd
df = pd.read_csv('books.csv')
from sqlalchemy import create_engine

# create sqlalchemy engine
engine = create_engine("mysql+pymysql://{user}:{pw}@localhost/{db}".format(user="root",pw="12345", db="books"))
data.to_sql('books.db', con = engine, if_exists = 'append', chunksize = 1000)

6. Select and print the title column from the book table in alphabetical order.
Ans.
sorted(df['title'])

7. From the book table, select and print all columns in the order of publication.
Ans.
sorted(df['year'])

8. Use the sqlalchemy module to connect to the sqlite3 database books.db that you just made in
exercise 6.
Ans.
def create_connection(db_file):
    """ create a database connection to the SQLite database
        specified by db_file
    :param db_file: database file
    :return: Connection object or None
    """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Error as e:
        print(e)

    return conn

9. Install the Redis server and the Python redis library (pip install redis) on your computer. Create a
Redis hash called test with the fields count (1) and name ('Fester Bestertester'). Print all the fields for
test.
Ans.
10. Increment the count field of test and print it.
Ans.
